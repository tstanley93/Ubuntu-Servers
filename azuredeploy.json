{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "New Storage Account Name"
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "The type of the storage account."
      }
    },
    "virtualNetworkResourceGroup": {
      "type": "string",
      "defaultValue": "Default-Networking",
      "metadata": {
        "description": "This is an already existing resource group, not a new one that contains an existing Virtual Network.  This allows you to use a single VNet so everything will talk to each other."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username used to login with."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password used to login with."
      }
    },
    "dnsNameforLBIP": {
      "type": "string",
      "metadata": {
        "description": "The unique DNS name not FQDN, that will be accessible via the Internet. "
      }
    },
    "vmNamePrefix": {
      "type": "string",
      "defaultValue": "myVM",
      "metadata": {
        "description": "Prefix used to create the Virtual Machine names."
      }
    },
    "lbName": {
      "type": "string",
      "defaultValue": "myLB",
      "metadata": {
        "description": "Load Balancer name"
      }
    },
    "avSetName": {
      "type": "string",
      "defaultValue": "myAVSet",
      "metadata": {
        "description": "Availability Set name"
      }
    },
    "nicNamePrefix": {
      "type": "string",
      "defaultValue": "MyNIC",
      "metadata": {
        "description": "Network Interface Name Prefix"
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "EIS-VNet",
      "metadata": {
        "description": "The existing Virtual Network name."
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "EIS-Server",
      "metadata": {
        "description": "The existing subnet name that you want to connect these VM's to."
      }
    },
    "imagePublisher": {
      "type": "string",
      "defaultValue": "Canonical",
      "metadata": {
        "description": "Image Publisher from the Market Place."
      }
    },
    "imageOffer": {
      "type": "string",
      "defaultValue": "UbuntuServer",
      "metadata": {
        "description": "Image Offer, can be found via powershell or CLI."
      }
    },
    "imageSKU": {
      "type": "string",
      "defaultValue": "14.04.2-LTS",
      "metadata": {
        "description": "Image SKU, can be found via powershell or CLI."
      }
    },
    "numberOfInstances": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "The total number of servers to be deployed.  Numerically, the last server will be the MySQL server."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_A1",
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4"
      ],
      "metadata": {
        "description": "Virtual Machine instance size."
      }
    }
  },
  "variables": {
    "vnetID": "[resourceId(parameters('virtualNetworkResourceGroup'),'Microsoft.Network/virtualNetworks',parameters('vnetName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',parameters ('subnetName'))]",
    "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('dnsNameforLBIP'))]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',parameters('lbName'))]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontend')]",
    "lbPoolID": "[concat(variables('lbID'),'/backendAddressPools/LoadBalancerBackend')]",
    "lbProbeID": "[concat(variables('lbID'),'/probes/tcpProbe')]",
    "lbProbe443ID": "[concat(variables('lbID'),'/probes/tcpProbe443')]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('storageAccountName')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[parameters('avSetName')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "properties": { }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[parameters('dnsNameforLBIP')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsNameforLBIP')]"
        }
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[concat(parameters('dnsNameforLBIP'), '-NSG')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "ssl_rule",
            "properties": {
              "description": "",
              "priority": 101,
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "443",
              "protocol": "TCP",
              "direction": "Inbound",
              "access": "Allow"
            }
          },
          {
            "name": "http_rule",
            "properties": {
              "description": "",
              "priority": 102,
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "80",
              "protocol": "TCP",
              "direction": "Inbound",
              "access": "Allow"
            }
          },
          {
            "name": "ssh_rule",
            "properties": {
              "description": "",
              "priority": 103,
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22",
              "protocol": "TCP",
              "direction": "Inbound",
              "access": "Allow"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('nicNamePrefix'), copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', parameters('lbName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', parameters('dnsNameforLBIP'),'-NSG')]"
      ],
      "properties": {
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups/', concat(parameters('dnsNameforLBIP'),'-NSG'))]"
        },
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID'), '/backendAddressPools/LoadBalancerBackend')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('lbID'),'/inboundNatRules/SSH-VM', copyindex())]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "name": "[parameters('lbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('dnsNameforLBIP'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontend",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBackend"
          }
        ],
        "inboundNatRules": [
          {
            "name": "SSH-VM0",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 8022,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "SSH-VM1",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 8023,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "SSH-VM2",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 8024,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "SSH-VM3",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 8025,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "SSH-VM4",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 8026,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbProbeID')]"
              }
            }
          },
          {
            "name": "LBRule443",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbProbe443ID')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpProbe",
            "properties": {
              "protocol": "tcp",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          },
          {
            "name": "tcpProbe443",
            "properties": {
              "protocol": "tcp",
              "port": 443,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(parameters('vmNamePrefix'), copyindex())]",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', parameters('nicNamePrefix'), copyindex())]",
        "[concat('Microsoft.Compute/availabilitySets/', parameters('avSetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',parameters('avSetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(parameters('vmNamePrefix'), copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('imagePublisher')]",
            "offer": "[parameters('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',parameters('storageAccountName'),'.blob.core.windows.net/vhds/','osdisk', copyindex(), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('nicNamePrefix'),copyindex()))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('http://',parameters('storageAccountName'),'.blob.core.windows.net')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "copy": {
        "name": "extensionLoop",
        "count": "[sub(parameters('numberOfInstances'), 1)]"
      },
      "name": "[concat(parameters('vmNamePrefix'), copyindex(),'/startup_script')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmNamePrefix'),copyindex())]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.2",
        "settings": {
          "fileUris": [
            "https://raw.githubusercontent.com/tstanley93/Azure/master/Servers/Ubuntu/Ubuntu-Servers/Ubuntu-Servers/Scripts/startup_script.sh",
            "https://raw.githubusercontent.com/tstanley93/Azure/master/Servers/Ubuntu/Ubuntu-Servers/Ubuntu-Servers/Scripts/opencart-2.0.1.1.zip"
          ],
          "commandToExecute": "[concat('bash startup_script.sh ',parameters('vmNamePrefix'),sub(parameters('numberOfInstances'),1) ,' ',parameters('dnsNameforLBIP'),' ',sub(parameters('numberOfInstances'),1), ' ',parameters('vmNamePrefix'), ' ',parameters('adminUsername'), ' ',parameters('adminPassword'))]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('vmNamePrefix'), sub(parameters('numberOfInstances'),1),'/mysql_startup_script')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmNamePrefix'),sub(parameters('numberOfInstances'),1))]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.2",
        "settings": {
          "fileUris": [
            "https://raw.githubusercontent.com/tstanley93/Azure/master/Servers/Ubuntu/Ubuntu-Servers/Ubuntu-Servers/Scripts/mysql_startup_script.sh"
          ],
          "commandToExecute": "[concat('bash mysql_startup_script.sh ',parameters('adminPassword'))]"
        }
      }
    }
  ]
}
